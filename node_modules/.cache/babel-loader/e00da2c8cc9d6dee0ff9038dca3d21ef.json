{"ast":null,"code":"import { applyMiddleware, compose, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers';\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n}) : compose;\nconst debug = process.env.NODE_ENV !== 'production';\nconst middleware = [debug && logger, thunkMiddleware].filter(Boolean);\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\nexport default function configureStore() {\n  return createStore(rootReducer, enhancer);\n}","map":{"version":3,"sources":["/Users/yzf/Desktop/github/pc/src/redux/store/index.js"],"names":["applyMiddleware","compose","createStore","logger","thunkMiddleware","rootReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","debug","process","env","NODE_ENV","middleware","filter","Boolean","enhancer","configureStore"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,gBAAgB,GACpB,OAAOC,MAAP,KAAkB,QAAlB,IACAA,MAAM,CAACC,oCADP,GAEED,MAAM,CAACC,oCAAP,CAA4C,CAC1C;AAD0C,CAA5C,CAFF,GAIOP,OALT;AAOA,MAAMQ,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAvC;AAEA,MAAMC,UAAU,GAAG,CACjBJ,KAAK,IAAIN,MADQ,EAEjBC,eAFiB,EAGjBU,MAHiB,CAGVC,OAHU,CAAnB;AAKA,MAAMC,QAAQ,GAAGV,gBAAgB,CAC/BN,eAAe,CAAC,GAAGa,UAAJ,CADgB,CAAjC;AAIA,eAAe,SAASI,cAAT,GAA2B;AACxC,SAAOf,WAAW,CAACG,WAAD,EAAcW,QAAd,CAAlB;AACD","sourcesContent":["import { applyMiddleware, compose, createStore } from 'redux'\nimport logger from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from '../reducers'\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose\n\nconst debug = process.env.NODE_ENV !== 'production'\n\nconst middleware = [\n  debug && logger,\n  thunkMiddleware\n].filter(Boolean)\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(...middleware)\n)\n\nexport default function configureStore () {\n  return createStore(rootReducer, enhancer)\n}\n"]},"metadata":{},"sourceType":"module"}