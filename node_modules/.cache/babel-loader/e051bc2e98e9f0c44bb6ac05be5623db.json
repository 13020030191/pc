{"ast":null,"code":"'use strict';\n\nvar REG_NUMBER = /^([+-])?0*(\\d+)(\\.(\\d+))?$/;\nvar REG_E = /^([+-])?0*(\\d+)(\\.(\\d+))?e(([+-])?(\\d+))$/i;\n/**\n * 科学计数法转十进制\n * \n * @param {string} num 科学记数法字符串\n * @returns string \n */\n\nvar e2ten = exports.e2ten = function (num) {\n  var result = REG_E.exec(num.toString());\n  if (!result) return num;\n  var zs = result[2],\n      xs = result[4] || \"\",\n      e = result[5] ? +result[5] : 0;\n\n  if (e > 0) {\n    var _zs = xs.substr(0, e);\n\n    _zs = _zs.length < e ? _zs + new Array(e - _zs.length + 1).join(\"0\") : _zs;\n    xs = xs.substr(e);\n    zs += _zs;\n  } else {\n    e = -e;\n    var s_start = zs.length - e;\n    s_start = s_start < 0 ? 0 : s_start;\n\n    var _xs = zs.substr(s_start, e);\n\n    _xs = _xs.length < e ? new Array(e - _xs.length + 1).join(\"0\") + _xs : _xs;\n    zs = zs.substring(0, s_start);\n    xs = _xs + xs;\n  }\n\n  zs = zs == \"\" ? \"0\" : zs;\n  return (result[1] == \"-\" ? \"-\" : \"\") + zs + (xs ? \".\" + xs : \"\");\n};\n/**\n * 分析数字字符串\n * \n * @param {string} num NumberString\n * @returns object\n */\n\n\nexports.getNumbResult = function (num) {\n  var result = REG_NUMBER.exec(num.toString());\n\n  if (!result && REG_E.test(num.toString())) {\n    result = REG_NUMBER.exec(e2ten(num.toString()));\n  }\n\n  if (result) {\n    return {\n      int: result[2],\n      decimal: result[4],\n      minus: result[1] == \"-\",\n      num: result.slice(1, 3).join('')\n    };\n  }\n};\n/**\n * 数组归一 (按索引覆盖合并数组,并清空被合并的数组)\n * \n * @param {array} baseArray 基础数组\n * @param {...array} array1 \n * @returns array\n */\n\n\nexports.centerArray = function centerArray(baseArray, array1\n/*[, array2[, ...[, arrayN]]]*/\n) {\n  baseArray.splice.apply(baseArray, [0, array1.length].concat(array1.splice(0, array1.length)));\n\n  if (arguments.length > 2) {\n    var r = [].slice.call(arguments, 2);\n    r.unshift(baseArray);\n    centerArray.apply(null, r);\n  }\n\n  return baseArray;\n};\n/**\n * 检查对像属性 (非原型链)\n * \n * @param {object} obj\n * @param {string} key\n * @returns\n */\n\n\nvar hasAttr = exports.hasAttr = function (obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n/**\n * 扩展对像(浅复制)\n * \n * @param {object} obj\n * @param {object} obj1\n * @returns\n */\n\n\nexports.extend = function (obj) {\n  var name,\n      target = arguments[0] || {};\n  var objs = Array.prototype.slice.call(arguments, 1);\n\n  for (var i = 0; i < objs.length; i++) {\n    var _obj = objs[i];\n\n    for (name in _obj) {\n      if (hasAttr(_obj, name)) {\n        target[name] = _obj[name];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * 获取真实数位\n * \n * @param {number} index 中文单位的索引\n */\n\n\nexports.getDigit = function (index) {\n  return index >= 5 ? (index - 4) * 4 + 4 : index;\n};\n/**\n * 往数组头部插入0\n * \n * @param {array} arr \n * @param {number} n \n */\n\n\nexports.unshiftZero = function (arr, n) {\n  if (n == null) n = 1;\n  if (n <= 0) return;\n\n  for (; n--;) arr.unshift(0);\n};\n/**\n * 清理多余\"零\"\n * \n * @param {any} str \n * @param {any} zero \"零\"字符\n * @param {any} type 清理模式 ^ - 开头, $ - 结尾, nto1 - 多个连续变一个\n * @returns \n */\n\n\nexports.clearZero = function (str, zero, type) {\n  if (str == null) return \"\";\n  var reg0 = ~\"*.?+$^[](){}|\\\\/\".indexOf(zero) ? \"\\\\\" + zero : zero;\n  var arg_s = new RegExp(\"^\" + reg0 + \"+\"),\n      arg_e = new RegExp(reg0 + \"+$\"),\n      arg_d = new RegExp(reg0 + \"{2}\", \"g\");\n  str = str.toString();\n\n  if (type == \"^\") {\n    str = str.replace(arg_s, \"\");\n  }\n\n  if (!type || type == \"$\") {\n    str = str.replace(arg_e, \"\");\n  }\n\n  if (!type || type == \"nto1\") {\n    str = str.replace(arg_d, zero);\n  }\n\n  return str;\n};","map":null,"metadata":{},"sourceType":"script"}