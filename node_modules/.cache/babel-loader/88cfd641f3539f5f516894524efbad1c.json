{"ast":null,"code":"var utils = require(\"./utils\");\n/**\n * 阿拉伯数字转中文数字\n * \n * @param {String} num 阿拉伯数字/字符串 , 科学记数法字符串\n * @param {Object} opration 转换配置\n *                          {\n *                              ww: {万万化单位 | false}\n *                              tenMin: {十的口语化 | false}\n *                          }\n * @returns String\n */\n\n\nfunction CL(num, options) {\n  var result = utils.getNumbResult(num);\n\n  if (!result) {\n    return num;\n  }\n\n  options = options ? options : {};\n  var ch = this.ch //数字\n  ,\n      ch_u = this.ch_u //单位\n  ,\n      ch_f = this.ch_f || \"\" //负\n  ,\n      ch_d = this.ch_d || \".\" //点\n  ,\n      n0 = ch.charAt(0); //零\n\n  var _int = result.int //整数部分\n  ,\n      _decimal = result.decimal //小数部分\n  ,\n      _minus = result.minus; //负数标识\n\n  var int = \"\",\n      dicimal = \"\",\n      minus = _minus ? ch_f : ''; //符号位\n\n  var encodeInt = function encodeInt(_int, _m, _dg) {\n    _int = utils.getNumbResult(_int).int;\n    var int = \"\",\n        tenm = arguments.length > 1 ? arguments[1] : options.tenMin,\n        _length = _int.length; //一位整数 \n\n    if (_length == 1) return ch.charAt(+_int);\n\n    if (_length <= 4) {\n      //四位及以下\n      for (var i = 0, n = _length; n--;) {\n        var _num = +_int.charAt(i);\n\n        int += tenm && _length == 2 && i == 0 && _num == 1 ? \"\" : ch.charAt(_num);\n        int += _num && n ? ch_u.charAt(n) : '';\n        i++;\n      }\n    } else {\n      //大数递归\n      var d = _int.length / 4 >> 0,\n          y = _int.length % 4; //\"兆\",\"京\"等单位处理\n\n      while (y == 0 || !ch_u.charAt(3 + d)) {\n        y += 4;\n        d--;\n      }\n\n      var _maxLeft = _int.substr(0, y),\n          //最大单位前的数字\n      _other = _int.substr(y); //剩余数字\n\n\n      int = encodeInt(_maxLeft, tenm) + ch_u.charAt(3 + d) + (_other.charAt(0) == '0' ? n0 : '') //单位后有0则加零 \n      + encodeInt(_other, tenm);\n    }\n\n    int = utils.clearZero(int, n0); //修整零\n\n    return int;\n  }; //转换小数部分\n\n\n  if (_decimal) {\n    _decimal = utils.clearZero(_decimal, \"0\", \"$\"); //去除尾部0\n\n    for (var x = 0; x < _decimal.length; x++) {\n      dicimal += ch.charAt(+_decimal.charAt(x));\n    }\n\n    dicimal = dicimal ? ch_d + dicimal : \"\";\n  } //转换整数部分\n\n\n  int = encodeInt(_int); //转换整数\n  //超级大数的万万化 \n\n  if (options.ww && ch_u.length > 5) {\n    var dw_w = ch_u.charAt(4),\n        dw_y = ch_u.charAt(5);\n    var lasty = int.lastIndexOf(dw_y);\n\n    if (~lasty) {\n      int = int.substring(0, lasty).replace(new RegExp(dw_y, 'g'), dw_w + dw_w) + int.substring(lasty);\n    }\n  }\n\n  return minus + int + dicimal;\n}\n/**\n * 中文数字转阿拉伯数字\n * \n * @param {string} cnnumb 中文数字字符串\n * @returns Number\n */\n\n\nfunction unCL(cnnumb) {\n  cnnumb = cnnumb.toString();\n  var result = cnnumb.split(this.ch_d);\n\n  var _int = result[0].replace(this.ch_f, \"\"),\n      _decimal = result[1],\n      _minus = !!~result[0].indexOf(this.ch_f);\n\n  var dw_s = this.ch_u.charAt(1),\n      dw_w = this.ch_u.charAt(4),\n      dw_y = this.ch_u.charAt(5);\n  _int = _int.replace(new RegExp(dw_w + \"{2}\", \"g\"), dw_y);\n\n  var cnarr = _int.split('');\n\n  var dw = 0,\n      maxdw = 0;\n  var rnum_a = [],\n      num_a = [],\n      _num_a = [];\n\n  for (var i = 0; i < cnarr.length; i++) {\n    var chr = cnarr[i];\n    var n = 0,\n        u = 0;\n\n    if (~(n = this.ch.indexOf(chr))) {\n      //_num = _num*10 + n;\n      if (n > 0) _num_a.unshift(n); //_num_a.unshift(n);\n    } else if (~(u = this.ch_u.indexOf(chr))) {\n      var digit = utils.getDigit(u);\n\n      if (dw > u) {\n        //正常情况\n        utils.unshiftZero(_num_a, digit);\n        utils.centerArray(num_a, _num_a);\n      } else if (u >= maxdw) {\n        //后跟大单位\n        if (i == 0) _num_a = [1];\n        utils.centerArray(rnum_a, num_a, _num_a);\n        if (rnum_a.length > 0) utils.unshiftZero(rnum_a, digit);\n        maxdw = u;\n      } else {\n        if (_num_a.length == 0 && dw_s == chr) _num_a = [1];\n        utils.centerArray(num_a, _num_a);\n        utils.unshiftZero(num_a, utils.getDigit(u));\n        dw = u;\n      }\n    }\n  }\n\n  utils.centerArray(rnum_a, num_a, _num_a).reverse();\n  if (rnum_a.length == 0) rnum_a.push(0);\n  var decimal = 0;\n\n  if (_decimal) {\n    rnum_a.push('.');\n    decimal = '0.';\n\n    for (var i = 0; i < _decimal.length; i++) {\n      decimal += this.ch.indexOf(_decimal.charAt(i));\n      rnum_a.push(this.ch.indexOf(_decimal.charAt(i)));\n    }\n\n    decimal = +decimal;\n  }\n\n  if (_minus) rnum_a.unshift('-');\n  return parseFloat(rnum_a.join(''));\n}\n/**\n * 阿拉伯数字转金额\n * \n * @param {String} num 阿拉伯数字/字符串 , 科学记数法字符串\n * @param {Object} options 转换配置\n *                         {\n *                             ww:{万万化开关 | true},\n *                             complete:{完整金额格式 | false},\n *                             outSymbol:{就否输出金额符号 | true}                             \n *                         }\n * @returns String\n */\n\n\nfunction toMoney(num, options) {\n  var def = {\n    ww: true,\n    complete: false,\n    outSymbol: true\n  };\n  var result = utils.getNumbResult(num);\n  var ch_0 = this.ch.charAt(0);\n  options = typeof options == \"object\" ? options : {};\n\n  if (!result) {\n    return num;\n  }\n\n  options = utils.extend(def, options);\n\n  var _num = result.num,\n      _decimal = result.decimal || \"\";\n\n  var t_str = options.outSymbol ? this.m_t : \"\",\n      zs_str = _decimal ? \"\" : this.m_z,\n      xs_str = \"\";\n\n  if (options.complete) {\n    for (var i = 1; i < this.m_u.length; i++) {\n      xs_str += CL.call(this, _decimal.charAt(i - 1) || \"0\") + this.m_u.charAt(i);\n    }\n\n    zs_str = CL.call(this, _num, options) + this.m_u.charAt(0);\n  } else {\n    _decimal = utils.clearZero(_decimal, \"0\", \"$\"); //去除尾部的0\n\n    if (_decimal) {\n      var mark_0;\n\n      for (var i = 0; i < this.m_u.length - 1; i++) {\n        if (_decimal.charAt(i) && _decimal.charAt(i) != \"0\") {\n          xs_str += CL.call(this, _decimal.charAt(i)) + this.m_u.charAt(i + 1);\n          mark_0 = false;\n        }\n\n        if (_decimal.charAt(i) === \"0\" && !mark_0) {\n          if (i != 0 || _num != \"0\") xs_str += ch_0; //当整为0时,小数前无需加零\n\n          mark_0 = true;\n        }\n      } //if(_num == \"0\"){xs_str = utils.clearZero(xs_str,ch_0,\"^\")}\n\n    }\n\n    if (_num != \"0\" || zs_str || !xs_str) {\n      zs_str = CL.call(this, _num, options) + this.m_u.charAt(0) + zs_str;\n    }\n  }\n\n  return t_str + zs_str + xs_str;\n}\n\nmodule.exports = {\n  CL: CL,\n  unCL: unCL,\n  toMoney: toMoney\n};","map":null,"metadata":{},"sourceType":"script"}